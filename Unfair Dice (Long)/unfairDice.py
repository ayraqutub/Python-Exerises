# ---------------------------------------------------
# Name : Ayra Qutub
# SID: 1708104
# CCID : aqutub
# AnonID : 1000316555
# CMPUT 274 , Fall 2022
#
# Weekly Exercise 2: Unfair Dice
# ---------------------------------------------------
import random
def biased_rolls(prob_list, s, n): 
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results. 

    Arguments:
        prob_list: a list of the probabilities of rolling the 
                   number on each side of the m-sided die. The list  
                   will always have the length m (m >= 2), where m is 
                   the number of sides numbered 1 to m. Therefore,  
                   for example, the probability stored at index 0 in 
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the 
               biased die, in the order they were generated.
    """
    
    rolls = [None]*n
    random.seed(s)
    length = len(prob_list)
    mapping=[None]*length

    #map the values
    #set the upper bound of each type
    
    for i in range(len(prob_list)):
        if i == 0:
            mapping[i]=prob_list[i]
        else:
            mapping[i] = mapping[i-1] + prob_list[i]
    side = list(range(1,len(prob_list)+1))
    # print(side)
    #roll the die
    for i in range(n):
        roll=random.random() #rolling
        # print (roll)
        if roll < mapping[0]:

            rolls[i]=side[0]
        else:
            for l in range(1,len(prob_list)+1):
                if roll < mapping [l]:
                    rolls[i] = side[l]
                    break
                    # print(side[l])
    # return the resulting rolls
    return rolls


 


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """
    # solve the problem here by replacing the pass keyword
    rollnum=[]
    countratio=[]

    for i in range (1,m+1):
        numcount=rolls.count(i)
        rollnum.append(numcount)

    for i in range(len(rollnum)):
        countpercent=rollnum[i]/max(rollnum)
        countratio.append(countpercent)
    
    print("Frequency Histogram: "+ str(m)+"-sided Die")
    for i in range(1,len(rollnum)+1):
        t=round(countratio[i-1]*float(width))
        print(str(i)+'.'+"#"*t+"-"*(width-t))
    # this function should print to standard output
    # you should not return anything!


if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.
    rolls = biased_rolls([1/3, 1/3, 1/3], (2**32)-1, 1000)
    draw_histogram(3, rolls, 10)
    pass
